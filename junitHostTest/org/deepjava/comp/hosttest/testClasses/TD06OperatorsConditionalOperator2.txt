	public static boolean ConditionalOperator2() {
		int mark;
		boolean bRes = false;
		boolean a = false, b = true, c = false;
		int d = 1, e = 2, f = 3;
		int iRes;
		mark = 101;
		iRes = d < e ? d : f;
		mark = 102;
		iRes = d < e ? (a ? d : e) : (b != c ? e : f);
		mark = 103;
		return (mark > iRes) && bRes;
	}


public static boolean ConditionalOperator2()
	//nofStackSlots=2, nofLocalSlots=9, codeLen=93
		  0 iconst_0
		  1 istore_1 [bRes]
		  2 iconst_0
		  3 istore_2 [a]
		  4 iconst_1
		  5 istore_3 [b]
		  6 iconst_0
		  7 istore [c]
		  9 iconst_1
		 10 istore [d]
		 12 iconst_2
		 13 istore [e]
		 15 iconst_3
		 16 istore [f]
		 18 bipush 101
		 20 istore_0 [mark]
		 21 iload [d]
		 23 iload [e]
		 25 if_icmpge 33
		 28 iload [d]
		 30 goto 35
		 33 iload [f]
		 35 istore [iRes]
		 37 bipush 102
		 39 istore_0 [mark]
		 40 iload [d]
		 42 iload [e]
		 44 if_icmpge 61
		 47 iload_2 [a]
		 48 ifeq 56
		 51 iload [d]
		 53 goto 74
		 56 iload [e]
		 58 goto 74
		 61 iload_3 [b]
		 62 iload [c]
		 64 if_icmpeq 72
		 67 iload [e]
		 69 goto 74
		 72 iload [f]
		 74 istore [iRes]
		 76 bipush 103
		 78 istore_0 [mark]
		 79 iload_0 [mark]
		 80 iload [iRes]
		 82 if_icmple 91
		 85 iload_1 [bRes]
		 86 ifeq 91
		 89 iconst_1
		 90 ireturn
		 91 iconst_0
		 92 ireturn

method ConditionalOperator2
	nodeNr:0 from 0 to 25	visited: false
		predecessor:
		successor: CFG-Node [28:30]	CFG-Node [33:33]
	nodeNr:1 from 28 to 30	visited: false
		predecessor: CFG-Node [0:25]
		successor: CFG-Node [35:44]
	nodeNr:2 from 33 to 33	visited: false
		predecessor: CFG-Node [0:25]
		successor: CFG-Node [35:44]
	nodeNr:3 from 35 to 44	visited: false
		predecessor: CFG-Node [28:30]	CFG-Node [33:33]
		successor: CFG-Node [47:48]	CFG-Node [61:64]
	nodeNr:4 from 47 to 48	visited: false
		predecessor: CFG-Node [35:44]
		successor: CFG-Node [51:53]	CFG-Node [56:58]
	nodeNr:5 from 51 to 53	visited: false
		predecessor: CFG-Node [47:48]
		successor: CFG-Node [74:82]
	nodeNr:6 from 56 to 58	visited: false
		predecessor: CFG-Node [47:48]
		successor: CFG-Node [74:82]
	nodeNr:7 from 61 to 64	visited: false
		predecessor: CFG-Node [35:44]
		successor: CFG-Node [67:69]	CFG-Node [72:72]
	nodeNr:8 from 67 to 69	visited: false
		predecessor: CFG-Node [61:64]
		successor: CFG-Node [74:82]
	nodeNr:9 from 72 to 72	visited: false
		predecessor: CFG-Node [61:64]
		successor: CFG-Node [74:82]
	nodeNr:10 from 74 to 82	visited: false
		predecessor: CFG-Node [51:53]	CFG-Node [56:58]	CFG-Node [67:69]	CFG-Node [72:72]
		successor: CFG-Node [85:86]	CFG-Node [91:92]
	nodeNr:11 from 85 to 86	visited: false
		predecessor: CFG-Node [74:82]
		successor: CFG-Node [89:90]	CFG-Node [91:92]
	nodeNr:12 from 89 to 90	visited: false
		predecessor: CFG-Node [85:86]
		successor:
	nodeNr:13 from 91 to 92	visited: false
		predecessor: CFG-Node [74:82]	CFG-Node [85:86]
		successor:

SSA for Method: ConditionalOperator2
   SSANode 0:
      EntrySet {[ , ], [ , , , , , , , , ]}
         0: NoOpnd[sCloadConst] 0 (Integer),   end=27, index=1, reg=2
         1: NoOpnd[sCloadConst] 0 (Integer),   end=15, index=2, reg=3
         2: NoOpnd[sCloadConst] 1 (Integer),   end=20, index=3, reg=4
         3: NoOpnd[sCloadConst] 0 (Integer),   end=20, index=4, reg=5
         4: NoOpnd[sCloadConst] 1 (Integer),   end=16, index=5, reg=6
         5: NoOpnd[sCloadConst] 2 (Integer),   end=21, index=6, reg=7
         6: NoOpnd[sCloadConst] 3 (Integer),   end=23, index=7, reg=8
         7: NoOpnd[sCloadConst] 101 (Integer),   end=7, index=0, reg=9
         8: Branch[sCBranch] {5, 4} (Void)
      ExitSet {[ , ], [ 7 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), ]}

   SSANode 1:
      EntrySet {[ , ], [ 7 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), ]}
         9: Monadic[sCRegMove] {4} (Integer),   end=12, index=8, reg=9, join={12}
         10: Branch[sCBranch]  (Void)
      ExitSet {[ 4 (Integer), ], [ 7 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 9 (Integer), ]}

   SSANode 2:
      EntrySet {[ , ], [ 7 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), ]}
         11: Monadic[sCRegMove] {6} (Integer),   end=12, index=8, reg=9, join={12}
      ExitSet {[ 6 (Integer), ], [ 7 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 11 (Integer), ]}

   SSANode 3:
      EntrySet {[ Phi-Function(12), ], [ 7 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), ]}
         12: PhiFunction[sCPhiFunc] {9, 11} (Phi-Function),   start=9, end=12, index=8, reg=9
         13: NoOpnd[sCloadConst] 102 (Integer),   end=13, index=0, reg=9
         14: Branch[sCBranch] {5, 4} (Void)
      ExitSet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}

   SSANode 4:
      EntrySet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}
         15: Branch[sCBranch] {1} (Void)
      ExitSet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}

   SSANode 5:
      EntrySet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}
         16: Monadic[sCRegMove] {4} (Integer),   end=24, index=8, reg=9, join={24}
         17: Branch[sCBranch]  (Void)
      ExitSet {[ 4 (Integer), ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 16 (Integer), Phi-Function(12) ]}

   SSANode 6:
      EntrySet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}
         18: Monadic[sCRegMove] {5} (Integer),   end=24, index=8, reg=9, join={24}
         19: Branch[sCBranch]  (Void)
      ExitSet {[ 5 (Integer), ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 18 (Integer), Phi-Function(12) ]}

   SSANode 7:
      EntrySet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}
         20: Branch[sCBranch] {3, 2} (Void)
      ExitSet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}

   SSANode 8:
      EntrySet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}
         21: Monadic[sCRegMove] {5} (Integer),   end=24, index=8, reg=9, join={24}
         22: Branch[sCBranch]  (Void)
      ExitSet {[ 5 (Integer), ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 21 (Integer), Phi-Function(12) ]}

   SSANode 9:
      EntrySet {[ , ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}
         23: Monadic[sCRegMove] {6} (Integer),   end=24, index=8, reg=9, join={24}
      ExitSet {[ 6 (Integer), ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 23 (Integer), Phi-Function(12) ]}

   SSANode 10:
      EntrySet {[ Phi-Function(24), ], [ 13 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(12) ]}
         24: PhiFunction[sCPhiFunc] {16, 18, 21, 23} (Phi-Function),   start=16, end=26, index=8, reg=9
         25: NoOpnd[sCloadConst] 103 (Integer),   end=26, index=0, reg=3
         26: Branch[sCBranch] {24, 25} (Void)
      ExitSet {[ , ], [ 25 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(24) ]}

   SSANode 11:
      EntrySet {[ , ], [ 25 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(24) ]}
         27: Branch[sCBranch] {0} (Void)
      ExitSet {[ , ], [ 25 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(24) ]}

   SSANode 12:
      EntrySet {[ , ], [ 25 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(24) ]}
         28: NoOpnd[sCloadConst] 1 (Integer),   end=29, reg=2
         29: Branch[sCreturn] {28} (Void)
      ExitSet {[ , ], [ 25 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(24) ]}

   SSANode 13:
      EntrySet {[ , ], [ 25 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(24) ]}
         30: NoOpnd[sCloadConst] 0 (Integer),   end=31, reg=2
         31: Branch[sCreturn] {30} (Void)
      ExitSet {[ , ], [ 25 (Integer), 0 (Integer), 1 (Integer), 2 (Integer), 3 (Integer), 4 (Integer), 5 (Integer), 6 (Integer), Phi-Function(24) ]}

Code for Method: ConditionalOperator2
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	38400000	[0xc]	li  r2, 0
	38600000	[0x10]	li  r3, 0
	38800001	[0x14]	li  r4, 1
	38a00000	[0x18]	li  r5, 0
	38c00001	[0x1c]	li  r6, 1
	38e00002	[0x20]	li  r7, 2
	39000003	[0x24]	li  r8, 3
	39200065	[0x28]	li  r9, 101
	7c063800	[0x2c]	cmp crf0, 0, r6, r7
	409f000c	[0x30]	bc  iffalse, CRF0[LT], 12, [0x3c]	
	7cc93378	[0x34]	lr  r9, r6
	48000008	[0x38]	b  8, [0x40]	
	7d094378	[0x3c]	lr  r9, r8
	39200066	[0x40]	li  r9, 102
	7c063800	[0x44]	cmp crf0, 0, r6, r7
	409f001c	[0x48]	bc  iffalse, CRF0[LT], 28, [0x64]	
	2c030000	[0x4c]	cmpi  crf0, 0, r3, 0
	419d000c	[0x50]	bc  iftrue, CRF0[EQ], 12, [0x5c]	
	7cc93378	[0x54]	lr  r9, r6
	48000020	[0x58]	b  32, [0x78]	
	7ce93b78	[0x5c]	lr  r9, r7
	48000018	[0x60]	b  24, [0x78]	
	7c042800	[0x64]	cmp crf0, 0, r4, r5
	419d000c	[0x68]	bc  iftrue, CRF0[EQ], 12, [0x74]	
	7ce93b78	[0x6c]	lr  r9, r7
	48000008	[0x70]	b  8, [0x78]	
	7d094378	[0x74]	lr  r9, r8
	38600067	[0x78]	li  r3, 103
	7c034800	[0x7c]	cmp crf0, 0, r3, r9
	409e0014	[0x80]	bc  iffalse, CRF0[GT], 20, [0x94]	
	2c020000	[0x84]	cmpi  crf0, 0, r2, 0
	419d000c	[0x88]	bc  iftrue, CRF0[EQ], 12, [0x94]	
	38400001	[0x8c]	li  r2, 1
	48000008	[0x90]	b  8, [0x98]	
	38400000	[0x94]	li  r2, 0
	8001000c	[0x98]	lwz  r0, 12(r1)
	7c0803a6	[0x9c]	mtspr  LR, r0
	38210010	[0xa0]	addi  r1, r1, 16
	4e800020	[0xa4]	bclr always, CRF7[SO]
