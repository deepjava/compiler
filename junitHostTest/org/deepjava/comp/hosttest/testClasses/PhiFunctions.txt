	private static void phiFunctionTest1() {
		int a;	// a erhält Wert erst in der Schleife
		int b;	// b erhält Wert erst in der Schleife
		do {
			a = 100;
			b = a * 2;
		} while (b < 0);
	}
	
	private static void phiFunctionTest1() { gleicher Fall wie oben
		int b;	// b erhält Wert erst in der Schleife
		do {
			int a = 100;	// a erhält Wert erst in der Schleife
			b = a * 2;
		} while (b < 0);
	}

Hier wird gar keine phi-Funktion erzeugt!! Grund: Schleife ist der erste Node und 
hat nur einen Predecessor (sich selber)
Wenn aber zu Beginn irgendeine Anweisung erfolgt, z.B. auch ein Call, dann 
ist es nicht mehr der erste Node und es gibt phi-Funktionen 
17.5.2011: Neu werden trotzdem phi-Funktionen eingefügt. Hier wären Sie nicht 
nötig, aber bei phiFunctionTest11.
Darum neu:
phi-Funktion für a ist del
phi-Funktion für b ist del

--------------------------------------------------------------------------------

	private static void phiFunctionTest2() {
		help2();
		int a;	// a erhält Wert erst in der Schleife
		int b;	// b erhält Wert erst in der Schleife
		do {
			a = 100;
			b = a * 2;
		} while (b < 0);
	}
	
phi-Funktion für a ist del
phi-Funktion für b ist del
--------------------------------------------------------------------------------

	private static void phiFunctionTest3() {
		int a = 100;	// a muss Register bis zum Ende der Schleife besitzen, sonst wird es neu vergeben
		int b;			// b erhält Wert erst in der Schleife
		do {
			a += 10;
			b = a * 2;
		} while (b < 0);
	}
	
phi-Funktion für a
phi-Funktion für b ist del
joins at index: [,,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0: end=7, vol
--------------------------------------------------------------------------------

	private static void phiFunctionTest4() {
		int a = 100;	// a muss Register bis zum Ende der Schleife besitzen, sonst wird es neu vergeben
		int b;			// b erhält Wert erst in der Schleife
		do {
			b = a * 2;
		} while (b < 0);
	}
	
a wird nur vor der Schleife gesetzt, trotzdem muss range bis zum Ende der Schleife gehen
phi-Funktion für a ist del und used
phi-Funktion für b ist del
joins at index: [,,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0: end=5, vol
--------------------------------------------------------------------------------

	private static void phiFunctionTest5() {
		int a = 100;	// a erhält in der Schleife neuen Wert
		int b;			// b erhält Wert erst in der Schleife
		do {
			a = 200;
			b = a * 2;
		} while (b < 0);
	}
phi-Funktion für a
phi-Funktion für b ist del
joins at index: [,,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0, end=6, vol, reg=2
--------------------------------------------------------------------------------

	private static int phiFunctionTest6() {
		int a;
		for (int i = 0; i < 10; i++);
		a = 100;
		for (int i = 0; i < 20; i++);
		return a + 3;
	}
	
phi-Funktion für a in der 1.Schleife ist del
phi-Funktion für i in der 1.Schleife
phi-Funktion für a in der 2.Schleife ist del und used
phi-Funktion für i in der 2.Schleife, dieser Bereich ist unabhängig von der 1.
  Schleife!!!
joins at index: [,,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=8: end=18, vol
	index=3: start=0, end=7, vol: start=9, end=16, vol
--------------------------------------------------------------------------------

	private static int phiFunctionTest7() {
		int a = 100;
		for (int i = 0; i < 10; i++);
		for (int i = 0; i < 20; i++);
		return a + 3;
	}

phi-Funktion für a in der 1.Schleife ist del und used
phi-Funktion für i in der 1.Schleife
phi-Funktion für a in der 2.Schleife ist del und used, opd dieser phi-Funktion 
  ist direkt die Instruktion "a = 100"
phi-Funktion für i in der 2.Schleife, dieser Bereich ist unabhängig von der 1.
  Schleife!!!
joins at index: [,,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0: end=18, vol
	index=3: start=1, end=8, vol: start=9, end=16, vol
--------------------------------------------------------------------------------

	private static int phiFunctionTest8() {
		int a = 100;
		for (int i = 0; i < 10; i++);
		int b = a * 3;
		for (int i = 0; i < 20; i++);
		return a + 3;
	}

phi-Funktion für a in der 1.Schleife ist del und used
phi-Funktion für i in der 1.Schleife
phi-Funktion für b in der 1.Schleife ist del
phi-Funktion für a in der 2.Schleife ist del und used, opd dieser phi-Funktion 
  ist direkt die Instruktion "a = 100"
phi-Funktion für i in der 2.Schleife, dieser Bereich ist unabhängig von der 1.
  Schleife!!!
phi-Funktion für b in der 2.Schleife ist del
joins at index: [,,x,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0, end=22, vol, reg=2
	index=3: start=1, end=9, vol, reg=3
	index=4: start=12, end=20, vol, reg=3
!!!Achtung: i in der 1. Schleife hat index 3, in der 2. Schleife aber index 4
--------------------------------------------------------------------------------

	private static int phiFunctionTest9() {
		int a = 100;
		for (int i = 0; i < 10 + a; i++);
		int b = a * 3;
		for (int i = 0; i < 20; i++);
		return a + 3;
	}

phi-Funktion für a in der 1.Schleife ist del und used
phi-Funktion für i in der 1.Schleife
phi-Funktion für b in der 1.Schleife ist del
phi-Funktion für a in der 2.Schleife ist del und used, opd dieser phi-Funktion 
  ist direkt die Instruktion "a = 100"
phi-Funktion für i in der 2.Schleife, dieser Bereich ist unabhängig von der 1.
  Schleife!!!
phi-Funktion für b in der 2.Schleife ist del
joins at index: [,,x,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=3: start=0, end=23, vol, reg=2
	index=4: start=1, end=10, vol, reg=3
	index=5: start=13, end=21, vol, reg=3
!!!Achtung: i in der 1. Schleife hat index 4, in der 2. Schleife aber index 5
--------------------------------------------------------------------------------
	private static int phiFunctionTest10() {
		int a = 100;
		int b;
		for (int i = 0; i < 10; i++);
		b = 200;
		for (int i = 0; i < 20; i++) b++;
		return a + b;
	}
	
phi-Funktion für a in der 1.Schleife ist del und used
phi-Funktion für b in der 1.Schleife ist del
phi-Funktion für i in der 1.Schleife
phi-Funktion für a in der 2.Schleife ist del und used, opd dieser phi-Funktion 
  ist direkt die Instruktion "a = 100"
phi-Funktion für b in der 2.Schleife
phi-Funktion für i in der 2.Schleife
joins at index: [,,x,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0: end=22, vol
	index=3: start=10: end=22, vol
	index=4: start=1, end=9, vol: start=11, end=21, vol
--------------------------------------------------------------------------------

	private static void phiFunctionTest11(int a) {
		// a muss Register bis zum Ende der Schleife besitzen, sonst wird es neu vergeben
		int b;			// b erhält Wert erst in der Schleife
		do {
			b = a * 2;
			b++;
		} while (b < 0);
	}

phi-Funktion für a ist del und used
phi-Funktion für b ist del
joins at index: [,,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0, end=7, vol
--------------------------------------------------------------------------------

	private static void phiFunctionTest12(int a) {
		// a muss Register bis zum Ende der Schleife besitzen, sonst wird es neu vergeben
		int b = 100;			// b erhält Wert erst in der Schleife
		do {
			b += a;
		} while (b < 0);
	}

phi-Funktion für a ist del und used
phi-Funktion für b
joins at index: [,,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=0: end=5, vol
	index=3: start=0: end=5, vol
--------------------------------------------------------------------------------

	static int phiFunctionTest13(int a) {
		if (a > 0) {
			float f2 = 3.0f;
			while (f2 < 10.0f) f2 += 5.0f;
			a = (int)f2;
		} else {
			int b = 4;
			while (b < 10) b += 5;
			a = b;
		}
		return (a);
	}
	
phi-Funktion für a in der 1. Schleife ist del
phi-Funktion für f2 in der 1. Schleife
phi-Funktion für a in der 2. Schleife ist del
phi-Funktion für b in der 2. Schleife
phi-Funktion für a am Ende von if
joins at index: [,,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=2: start=11, end=23, vol, reg=2
	index=3: start=2, end=11, vol, reg=1: start=13, end=21, vol, reg=3
--------------------------------------------------------------------------------

 	private void phiFunctionTest14(int a) {
		int b = 10;
		do a--; while(a < -1);
		b++;
		while (b == 0) {
			int c = a * 2;
			int d = c - b;
			if (c > 1) break;
			int e = c + d;
			b++;
		}
		int f = 2 + b;
	}

1. Schleife:	
phi-Funktion für ref ist del
phi-Funktion für a
phi-Funktion für b ist del und used
phi-Funktion für c ist del
phi-Funktion für d ist del
phi-Funktion für e ist del
2. Schleife:	
phi-Funktion für ref ist del
phi-Funktion für a ist del und used
phi-Funktion für b, Achtung: das b++ vor der while-Schleife erzeugt einen neuen 
range!
phi-Funktion für c ist del
phi-Funktion für d ist del
phi-Funktion für e ist del
joins at index: [,,,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=3: start=0, end=31, vol, reg=3
	index=4: start=0, end=33, vol, reg=4
--------------------------------------------------------------------------------

	private void phiFunctionTest15() {
		int a = 10;
		do a--; while(a > -1);
		int b = 20;
		while (b == 0) {
			int c = a * 2;
			int d = a -1;
			int e = a + b;
			b--;
		}
		int f = 2 + b;
	}
	
1. Schleife:	
phi-Funktion für ref ist del
phi-Funktion für a
phi-Funktion für b ist del
phi-Funktion für c ist del
phi-Funktion für d ist del
phi-Funktion für e ist del
2. Schleife:	
phi-Funktion für ref ist del
phi-Funktion für a ist del und used
phi-Funktion für b 
phi-Funktion für c ist del
phi-Funktion für d ist del
phi-Funktion für e ist del
joins at index: [,,,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=3: start=0, end=27, vol, reg=3
	index=4: start=12, end=29, vol, reg=2
--------------------------------------------------------------------------------

	private void phiFunctionTest16() {
		int a = 10;
		while (a < 15) a++;
		int b = 20;
		while (b > 10) {
			int c = b + 1;
		}
		if (a < b) a += 10;
		int c = 2 + a;
	}

1. Schleife:	
phi-Funktion für ref ist del
phi-Funktion für a
phi-Funktion für b ist del
phi-Funktion für c ist del
2. Schleife:	
phi-Funktion für ref ist del
phi-Funktion für a ist del und used
phi-Funktion für b ist del und used 
phi-Funktion für c ist del
3. if-Anweisung
phi-Funktion für a
joins at index: [,,,x,x,,,,,,,,,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=3: start=0, end=26, vol, reg=3
	index=4: start=11, end=21, vol, reg=2
--------------------------------------------------------------------------------

	// from Heap.newMultiDimArray
	private static int phiFunctionTest17(int ref, int nofDim, int dim0, int dim1, int dim2, int dim3, int dim4) {
		if (nofDim > 3 || nofDim < 2) help3(20);
		if (nofDim == 2) {
			int elemSize = help4(ref);
			int dim1Size = (8 + dim1 * elemSize + 3) >> 2 << 2;	
			int size = 8 + dim0 * 4 + dim0 * dim1Size;
			int addr = heapPtr; 
			while (addr < heapPtr + size) {help5(addr, 0); addr += 4;}
			help5(heapPtr + 4, ref);	// write tag
			help5(heapPtr + 2, dim0);	// write length of dim0
			ref = heapPtr + 8;
			addr = ref;
			for (int i = 0; i < dim0; i++) {
				int elemAddr = ref + 4 * dim0 + 8 + i * dim1Size; 
				help5(addr, elemAddr);
				help5(elemAddr - 4, ref);	// write tag
				help5(elemAddr - 6, dim1);	// write length of dim0
				addr += 4;
			}
			heapPtr += ((size + 15) >> 4) << 4;
		}
		return ref;
	}
joins at index: [,,,x,,x,x,x,x,x,,x,x,x,x,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=3: start=0, end=121, nonVol, reg=31
	index=5: start=0, end=116, nonVol, reg=29
	index=6: start=0, end=117, nonVol, reg=28
	index=7: start=0, end=118, nonVol, reg=27
	index=8: start=0, end=119, nonVol, reg=26
	index=9: start=0, end=120, nonVol, reg=25
	index=11: start=20, end=98, nonVol, reg=30
	index=12: start=27, end=101, nonVol, reg=24
	index=13: start=28, end=52, nonVol, reg=23: start=64, end=98, nonVol, reg=23
	index=14: start=65, end=98, nonVol, reg=22
--------------------------------------------------------------------------------

	static final int maxStringLen = 64;
	static byte[] txData = new byte[maxStringLen];
	static final byte startSymbol = 0x11;
	static void write(byte[] txData2, int i, int j) {}

	// from CmdTransmitter.sendFailed
	public static void phiFunctionTest18(byte code, String message, int expected, int actual) {
		int len = 0;
		byte checkByte;
		byte[] m = null;
		if (message != null) {
			len = message.length();
			m = new byte[len];
			for (int i = 0; i < len; i++) m[i] = (byte)message.charAt(i);
			if (len > maxStringLen)
				len = maxStringLen;
		}
		len += 11;
		txData[0] = startSymbol;
		txData[1] = (byte) len;
		checkByte = txData[1];
		txData[3] = (byte) (expected >> 24);
		checkByte ^= txData[3];
		txData[7] = (byte) (actual >> 24);
		checkByte ^= txData[7];
		txData[11] = code;
		checkByte ^= txData[11];
		for (int i = 12; i <= len; i++) {
			txData[i] = m[i - 12];
			checkByte ^= txData[i];
		}
		txData[len + 1] = checkByte;
		write(txData, 0, len + 2);
	}
joins at index: [,,,,,x,x,x,x,x,x,x,x,,,,,,,,,,,,,,,,,,,,]
live ranges of phi functions
	index=5: start=0, end=75, nonVol, reg=31
	index=6: start=0, end=25, nonVol, reg=30
	index=7: start=0, end=54, nonVol, reg=29
	index=8: start=0, end=65, nonVol, reg=28
	index=9: start=0, end=39, nonVol, reg=27: start=39, end=110, vol, reg=2
	index=10: start=80, end=106, vol, reg=4
	index=11: start=1, end=102, nonVol, reg=26
	index=12: start=7, end=25, nonVol, reg=25: start=81, end=102, vol, reg=3
--------------------------------------------------------------------------------

	// problem taken from flash file System
	public static void phiFunctionTest19() {
		int[] a = new int[5];
		for (int i = 0; i < 32; i++) {
			int b = 20;
			for (int k = 0; k < 3; k++) a[k] = b;
		}
		for (int n = 0; n < 7; n++);
	}

äussere for-Schleife:	kommt im Code weiter unten
phi-Funktion für a ist del und used
phi-Funktion für i
phi-Funktion für b ist del
phi-Funktion für k ist del
innere for-Schleife:	
phi-Funktion für a ist del und used
phi-Funktion für i ist del und used  
phi-Funktion für b ist del und used 
phi-Funktion für k 
nachfolgende for-Schleife:	
phi-Funktion für a ist del
phi-Funktion für n 
phi-Funktion für b ist del  
phi-Funktion für k ist del

Problem: phi-Funktion für a in der äusseren Schleife ist del. Das darf nicht 
sein, weil in einer inneren Schleife eine weitere phi-Funktion für a existiert
und diese used ist. Man muss dem Dominator folgen.

	
--------------------------------------------------------------------------------

	In Klasse Double.java
  public static int doubleToChars(double val, int nofFractDigits, char[] chars) {
		gchars = chars;
		nofChars = 0;
		if (chars == null) return 0;
		int high = highPartToIntBits(val);

		if ((high & highINF) == highINF) {
			if ((high & highNaN) == highNaN) { // NaN
				putChar('N'); putChar('a');	putChar('N');
			} else { // INF
				if (high >= 0) putChar('+');
				else putChar('-');
				putChar('I'); putChar('N');	putChar('F');
			}
			putChar('\0');
			gchars = null;
			return nofChars;
		}

		int exp = (high & highINF) >> 20;
		if (exp != 0 && high < 0) {
			putChar('-');
			val = -val;
A		}
		int low;
		if (exp == 0) { // no denormals
			high = 0;
			low = 0;
		} else { 
			if (nofFractDigits < 1) nofFractDigits = 1;
			else if (nofFractDigits > 15) nofFractDigits = 15;
B:		exp = (exp - expOffset) * 301029;
			if (exp % 1000000 < 0) exp = exp / 1000000 - 1;
			else exp = exp / 1000000; 
C:		double z = powOf10(exp + 1);
			if (val >= z) {
				val = val / z;
				exp++;
			} else {
				val = val * powOf10(-exp);
D:		}
			if (val >= 10) {
				val = val * 0.1 + 0.5 / powOf10(nofFractDigits);
				exp++;
			} else {
				val = val + 0.5 / powOf10(nofFractDigits);
				if (val >= 10) {
					val = val * 0.1;
					exp++;
				}
			}
			val = val * 1E7;
			high = (int) val;
			low = (int) ((val - high) * 1E8);
		}

		int dig = 15;
		while (dig > 7) {
			digits[dig] = (char) (low % 10 + '0');
			low = low / 10;
			dig--;
		}
		while (dig >= 0) {
			digits[dig] = (char) (high % 10 + '0');
			high = high / 10;
			dig--;
		}
		putChar(digits[0]);
		putChar('.');
		dig = 1;
		while (dig <= nofFractDigits) {
			putChar(digits[dig]);
			dig++;
		}
		putChar('E');
		if (exp >= 0) putChar('+');
		else {putChar('-'); exp = -exp;}
		putChar((char) (exp / 100 % 10 + '0'));
		putChar((char) (exp / 10 % 10 + '0'));
		putChar((char) (exp % 10 + '0'));
		putChar('\0');
		gchars = null;
		return nofChars;
	}
	
index name            start end vol     reg   in SSA
6     val             0     128 nonVol  f31   0-54
7     ist zweiter Slot von val
8     nofFractDigits  0     201 nonVol  r31   0-71
9     chars, keine phi function  end = 4      0-4
10    high            53    178 nonVol  f30   5-65  Achtung: wird in 8 gesetzt
          und bis 47 gebraucht, hat aber in diesem Bereich keine phi Funktion
          und wird später neu gesetzt
11    exp             45    229 nonVol  r29   20-80
12    low             54    156 nonVol  r28   25-60
13    dig             133   178 vol           57-73  
                      185   201 nonVol
14    ?

  phi functions
	A: 51, phi-function für val
  B: 65, phi-function für nofFractDigits
  C: 80, phi-function für exp
  D: 93,94, phi-function für val und exp

--------------------------------------------------------------------------------

	In Klasse Kernel.java
	boot

index name            start end vol     reg   in SSA
3     reg             keine phi function
4     reset           keine phi function
5     classConstOff   73    171 nonVol  r31  
                      177   213 nonVol  r31 im Moment r26 ???????!!!!!!!! 
6     state           74    171 nonVol  r30 
7     kernelClinitAddr76    213 nonVol  r29
8     constBlkBase    92    213 nonVol  r28
      Achtung: constBlkBase wird in 1. und 2. Schleife definiert, beim Merge der
      Nodes wird detektiert, dass auf dem gleichen Index im StateArray nicht der
      gleiche SSAValue, sehr wohl aber der gleiche Typ vorhanden ist, also wird
      eine phi Function eingefügt, obwohl diese hier gar nicht nötig wäre, sie 
      stört aber auch nicht weiter
9     constBlkSize    95    213 nonVol  r27
      gleicher Fall wie oben, in der ersten Schleife heisst die Variable in diesem
      Index constBlkSize, in der 2. Schleife clinitAddr, gibt phi function
10    codeBase        nur in einem linearen Bereich verwendet, alle phi deleted
      -> kein join
11    codeSize        wie oben
12    varBase         wie oben
13    varSize         wie oben
14    begin           146   166 vol     r2
15    end             147   166 vol     r3

  phi functions
  in oberster Schleife while (reg): alle del
  nach if: keine phi
  1. Schleife while (true): normale phi für index 5 und 6, Rest del
    in 1. Schleife if (FCS): alle del
    in 1. Schleife if (FCS): alle del
    in 1. Schleife while (): alle del dazu index 5 und 6 used
  2. Schleife while (true): normale phi für index 5, 8, 9, 
                            index 7 ist del und used
                            Rest del
